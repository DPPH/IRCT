package edu.harvard.hms.dbmi.bd2k.irct.cl.util;


import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import javax.servlet.http.*;
import java.io.*;

import static junit.framework.Assert.assertNotNull;
import static junit.framework.TestCase.assertEquals;
import static junit.framework.TestCase.assertNull;
import static org.powermock.api.mockito.PowerMockito.when;

@PowerMockIgnore({"javax.crypto.*" })
@RunWith(PowerMockRunner.class)
@PrepareForTest(Utilities.class)
public class UtilitiesTest {

    private Utilities cut = new Utilities();

    @Test
    public void testExtractEmailFromJWT() throws UnsupportedEncodingException, IOException{

        /*
        JWT generated and returned in mock HttpServletRequest:
         email = "test@email.com"
        environment="test.environment"
        client_id="testClientId1234567890abcdefghij"
        client_secret="testClientSecretabcdefghijklmnopqrstuvwx_12345678910111213141516"

        'sub': "samlp|"+email,
        'email': email,
        "aud": client_id,
        "description": "Autogenerated token for "+environment,
        "exp":calendar.timegm(time.strptime('Jan 30, 2019 @ 00:00:00 EST', '%b %d, %Y @ %H:%M:%S EST')),
        "iss":calendar.timegm(time.gmtime())
        */

        String clientSecret = "testClientSecretabcdefghijklmnopqrstuvwx_12345678910111213141516";
        String userField = "testField";


        HttpServletRequest req = PowerMockito.mock(HttpServletRequest.class);
        when(req.getHeader("Authorization")).thenReturn("Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzYW1scHx0ZXN0QGVtYWlsLmNvbSIsImF1ZCI6InRlc3RDbGllbnRJZDEyMzQ1Njc4OTBhYmNkZWZnaGlqIiwiaXNzIjoxNTE4MTIxMDcwLCJleHAiOjE1NDg4MDY0MDAsImVtYWlsIjoidGVzdEBlbWFpbC5jb20iLCJkZXNjcmlwdGlvbiI6IkF1dG9nZW5lcmF0ZWQgdG9rZW4gZm9yIHRlc3QuZW52aXJvbm1lbnQifQ.2PiZQbHkEc1uIkEZ9F8j5RhlCfVE35BjRc0i3CcWP8s");

        //Fake field should return null
        String result = cut.extractEmailFromJWT(req, clientSecret, userField);
        assertNull(result);

        result = cut.extractEmailFromJWT(req, clientSecret, "sub");
        assertNotNull(result);
        assertEquals(result, "samlp|test@email.com");

        result = cut.extractEmailFromJWT(req, clientSecret, "email");
        assertNotNull(result);
        assertEquals(result, "test@email.com");

    }
}
